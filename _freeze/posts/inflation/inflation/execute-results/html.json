{
  "hash": "286d25f875ea345d0534c6f516afdbdb",
  "result": {
    "markdown": "---\ntitle: \"Understanding inflation in Australia with a help of ABS and SDMX\"\nauthor: \"Maria Prokofieva\"\ndate: \"2023-11-02\"\ncategories: [data]\ntitle-block-banner: false\n---\n\n\nMoney. Money. Money.\n\nI hope you have already visualised your 10 mln check (not BILL) coming to your bank account, but let's be specific and look at the data behind decisions to keep or raise interest rate.\n\nSo, this week we are going to look at **Consumer Price Index, Australia** available at the Australian Bureau of Statistics (ABS) [website](https://www.abs.gov.au/statistics/economy/price-indexes-and-inflation/consumer-price-index-australia)\n\nThe **Consumer Price Index (CPI)** measures household inflation and includes statistics about price change for categories of household expenditure.\n\n![PCI at ABS](img/pci1.png){width=50% fig-align=\"left\"}\n\n### Data\n\nYou can either download the data from\n[here](https://www.abs.gov.au/statistics/economy/price-indexes-and-inflation/consumer-price-index-australia/latest-release#data-downloads)\n\nor use API and get data straight to R using `rsdmx` package. \n\nNote: this is NOT your traditional `json` format, this is RSDMX format. You can read more about RSDMX on its official [website](\"https://sdmx.org/\"). Briefly, SDMX is a standardized framework used to exchange statistical data and metadata. It aims to improve the efficiency and interoperability of data exchange processes.\n\nBefore using the package make sure that you run:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"opensdmx/rsdmx\")\n```\n:::\n\n\nand then load libraries:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(rsdmx)\n```\n:::\n\n\nand now let's get the content\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyUrl <- \"https://api.data.abs.gov.au/data/ABS,CPI,1.1.0/1+2+3+4+5.132305+132304+132306+102675+102676+104101+104102+104104+104105+104120+104122+115902+115922+115941+115961+117101+117104+117107+117121+117124+117127+117144+128058+128061+131197+131199+114120+115492+115522+115528+131179+131180+131181+131182+131184+131186+131187+131188+131189+131191+131193+131195+30001+30002+30003+30007+30012+30016+30022+30024+30025+30026+30027+30033+40106+97556+97561+97563+97565+114121+114122+1144+115484+115485+115495+115496+115497+115498+115500+115501+115520+115524+115529+131178+131183+131185+131190+131192+131194+30014+40001+40002+40004+40005+40006+40007+40008+40009+40010+40012+40014+40015+40025+40026+40027+40029+40030+40034+40045+40046+40047+40048+40053+40055+40058+40060+40066+40067+40072+40073+40077+40078+40080+40081+40083+40084+40085+40086+40087+40088+40089+40090+40091+40092+40093+40094+40095+40096+40098+40101+40102+97549+97550+97551+97554+97555+97557+97558+97559+97560+97564+97567+97571+97572+97573+97574+10001+20001+20002+20003+20004+20005+20006+115486+115488+115489+115493+126670+999901+999902+999903.10+20.1+2+3+4+5+6+7+8+50.Q?startPeriod=2000-Q1&dimensionAtObservation=AllDimensions\"\nmyUrl <- \"https://api.data.abs.gov.au/data/ABS,CPI,1.1.0/1+2+3+4+5.10001+20001+20002+20003+20004+20005+20006+115486+115488+115489+115493+126670+999901+999902+999903.10+20.50.Q?startPeriod=2000-Q1&dimensionAtObservation=AllDimensions\"\n\ndataset <- as.data.frame(readSDMX(myUrl))\n```\n:::\n\n\n\nLet's have a snippet of our data:\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nRows: 440820 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): TIME_PERIOD, FREQ, UNIT_MEASURE, OBS_STATUS\ndbl (6): MEASURE, INDEX, TSEST, REGION, obsValue, DECIMALS\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\nAnd we have the following names in the dataset and first 20 rows there\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(dataset)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"TIME_PERIOD\"  \"MEASURE\"      \"INDEX\"        \"TSEST\"        \"REGION\"      \n [6] \"FREQ\"         \"obsValue\"     \"UNIT_MEASURE\" \"DECIMALS\"     \"OBS_STATUS\"  \n```\n:::\n\n```{.r .cell-code}\ndataset|>head(20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 10\n   TIME_PERIOD MEASURE  INDEX TSEST REGION FREQ  obsValue UNIT_MEASURE DECIMALS\n   <chr>         <dbl>  <dbl> <dbl>  <dbl> <chr>    <dbl> <chr>           <dbl>\n 1 2000-Q1           3 115941    10      1 Q          3   PCT                 1\n 2 2000-Q2           3 115941    10      1 Q          3.5 PCT                 1\n 3 2000-Q3           3 115941    10      1 Q          6   PCT                 1\n 4 2000-Q4           3 115941    10      1 Q          5.8 PCT                 1\n 5 2001-Q1           3 115941    10      1 Q          6.5 PCT                 1\n 6 2001-Q2           3 115941    10      1 Q          6.3 PCT                 1\n 7 2001-Q3           3 115941    10      1 Q          3   PCT                 1\n 8 2001-Q4           3 115941    10      1 Q          3.6 PCT                 1\n 9 2002-Q1           3 115941    10      1 Q          3   PCT                 1\n10 2002-Q2           3 115941    10      1 Q          2.8 PCT                 1\n11 2002-Q3           3 115941    10      1 Q          3.2 PCT                 1\n12 2002-Q4           3 115941    10      1 Q          2.8 PCT                 1\n13 2003-Q1           3 115941    10      1 Q          3.3 PCT                 1\n14 2003-Q2           3 115941    10      1 Q          2.5 PCT                 1\n15 2003-Q3           3 115941    10      1 Q          2.1 PCT                 1\n16 2003-Q4           3 115941    10      1 Q          2.4 PCT                 1\n17 2004-Q1           3 115941    10      1 Q          2   PCT                 1\n18 2004-Q2           3 115941    10      1 Q          2.5 PCT                 1\n19 2004-Q3           3 115941    10      1 Q          2.8 PCT                 1\n20 2004-Q4           3 115941    10      1 Q          2.9 PCT                 1\n# ℹ 1 more variable: OBS_STATUS <chr>\n```\n:::\n:::\n\n\nNow, what are those variables and what are values there? We need to get metadata and we will use a very convenient ABS sdmx data dictionary to get it.\n\nFirst, we need to get the **Data Structure Definition (DSD)** data, using the link from ABS website.\n\nIn `rsdmx` the properties of objects in DSD are calleds slots and can be accessed using the slot method. We  extract the  information about the individual slots in the DSD document we obtained already using `slot()` and get a list of codelists using `sapply()`. \n\nNote: dds is a `S4` class and that is why we are using `sapply()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndds<- readSDMX(\"https://api.data.abs.gov.au/dataflow/ABS/CPI/1.1.0?references=all\")\n\ncodelist_data<-slot(dds, \"codelists\")\n```\n:::\n\n\nWe have the following codelists in our DSD:\n\n![PCI at ABS](img/pci2.png){fig-align=\"left\"}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconcepts <- as.data.frame(slot(dsd, \"concepts\"))\n```\n:::\n\n\n\n#get concepts from DSD\nconcepts <- as.data.frame(slot(dsd, \"concepts\"))\n\n\n\n\n`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstats|>summary()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}